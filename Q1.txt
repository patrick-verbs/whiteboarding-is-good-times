Question #1: Turning Strings to URLs
URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.

Example
Input: "Jasmine Ann Jones"

Output: "Jasmine%20Ann%20Jones"

// This is fairly straightforward: the input -- i.e., the argument -- is a string (which may contain spaces), and the output -- i.e., what the function returns -- is the *same* string with '%20' in place of any spaces.

// Foolish assumptions:
// 1) Only a string will be argued, so I won't have to write handling for invalid data such as integers, booleans, etc.
// 2) I do not have to concatenate/condense multiple consecutive spaces into a single space. That is, if the input string contains multiple spaces in a row, my output string will have multiple '%20' in a row, as I'll assume it's beyond the scope of my job to mutate the user's desired string.

***********
///////////
// Solution 1 - Without Recursion
// Plan:
// 1) Create an array of characters from the input string using the '.split("")' method
// 2) Loop through the array one element (and therefore one *character*) at a time
//   a) If the character is *not* a space, do nothing
//   b) If the character *is* a space, replace it with the string '%20'
// 3) Create a string from the completed array using the '.join("")' method (specifying the empty string "" to avoid having the array's commas in the finished string!).
// 4) Return the finished string

// First, I'll scaffold my function with the two things I know I'll need: the input string (parameter) and the output string (return statement).

function formatStringToUrl(inputString) {
  return outputString;
}

// Next, I'll define my array using the .split method from Step 1.
// And clearly, I'll need to declare 'outputString' before returning it, so I'll add that declaration below.

function formatStringToUrl(inputString) {
  const splitString = inputString.split("");

  const outputString = "PLACEHOLDER TEXT";
  return outputString;
}

// Now it's time for my Step 2 logic. To look at each element (containing a character) in the array I'll need to loop through it one index at a time.

function formatStringToUrl(inputString) {
  const splitString = inputString.split("");

  for (let i = 0; i < splitString.length; i++) {
    // Look at each character using splitString[i]
  }

  const outputString = "PLACEHOLDER TEXT";
  return outputString;
}

// For Step 2a, I don't actually need an 'if' branch, because it's doing *nothing* -- it's not altering the array element. I wouldn't have any code to write under that branch!
// Instead, I'll write an 'if' statement to handle Step 2b, inside which I'll code instructions for replacing the space character with '%20' -- and if that character is not a space, the loop will simply continue on.

function formatStringToUrl(inputString) {
  const splitString = inputString.split("");

  for (let i = 0; i < splitString.length; i++) {
    // Look at each character using splitString[i]
    if (splitString[i] === " ") {
      splitString[i] = "%20";
    }
  }

  const outputString = "PLACEHOLDER TEXT";
  return outputString;
}

// Finally, I'll convert this processed array into a string per Step 3. This will actually go in my 'const outputString = ' declaration. The 'return' statement from Step 4 is already written, and this should complete the solution.

function formatStringToUrl(inputString) {
  const splitString = inputString.split("");

  for (let i = 0; i < splitString.length; i++) {
    // Look at each character using splitString[i]
    if (splitString[i] === " ") {
      splitString[i] = "%20";
    }
  }

  const outputString = splitString.join("");
  return outputString;
}
///////////
***********

***********
///////////
// Solution 2 - Refactor for Recursion
// Plan:
// Recursion is tricky, and I've not previously written a recursive function, so this will be a fun process. Thanks to the book "Grokking Algorithms" by Aditya Bhargava, I have a conceptual understanding of the call stack and how recursion's first-in, first-out calls will work.
// Basically, I will be replacing my for-loop with recursive calls in which the function calls itself, not returning a *base case* and "tunneling out" of the call-stack pile until some condition is met.
// That condition, I think, will be the current array index that the function is "looking at" being the *final* index.
// First, I'll remove my for-loop and scaffold my base case.

function formatStringToUrl(inputString) {
  const splitString = inputString.split("");

  // BASE CASE
  // If the current array index is the *last* index, end the recursive calls -- there's nothing left to do after this
  if (i === splitString.length - 1) {
    return;
  }

  const outputString = splitString.join("");
  return outputString;
}

// Several things jump out to me, here. Firstly, my final two statements (declaring the output string, and returning it) likely belong in my base case. This is because they're the final step in my original function's process, and the base case is the final step in the recursive process (before combining with previous 'return' values while tunneling back out of the call stack).
// Also, the variable 'i' will no longer be valid, as it is not defined -- it was declared in the loop I removed. Rather than re-declare 'i', however, my understanding of recursive functions is such that I'll be passing slightly altered arguments (that argument being 'inputString') each time the function calls itself. So, what if instead of 'i', I have my if-statement look at a *constant* (specific, unchanging) index value?
// What should that value be? I know I'll be chipping away at this input string and that it will eventually be down to 1 character in length. So I'll simply see if length equals 1.

function formatStringToUrl(inputString) {
  const splitString = inputString.split("");

  // BASE CASE
  // If the *first* array index is also the *last* index, end the recursive calls -- there's nothing left to do after this
  if (splitString.length === 1) {
    const outputString = splitString.join("");
    return outputString;
  }
}

// That should take care of my base case, for now. I may need to refactor after working through my logic more with the recursive case, but the important thing is that I have an if-branch that should catch on when my ever-reducing input string has nothing left to parse, and 'return' out of the function to prevent a stack overflow.
// For the recursive case, I'll want to:
// 1) Look at the 0th element (i.e., character) in the array
//   a) If it is *not* a space, return that same element's contents (a string of one character) + Step 2...
//   b) If it's a space, return '%20' + Step 2...
// 2) Have the function call itself, but instead of passing the same 'inputString', instead pass a string with the *first character removed* since a) we already processed it, and b) we're going to be prepending that character in Step 1.

function formatStringToUrl(inputString) {
  const splitString = inputString.split("");

  // BASE CASE
  // If the *first* array index is also the *last* index, end the recursive calls -- there's nothing left to do after this
  if (splitString.length === 1) {
    const outputString = splitString.join("");
    return outputString;
  } else {
  // RECURSIVE CASE
    firstChar = splitString[0];
    // First, save the value of this character so we can use it after we mutate our array (and for a useful shorthand!)

    splitString.shift();
    // Next, remove the first element/character from the array...

    const unparsedString = splitString.join("");
    // ...so we can easily build our new, smaller string

    // Now proceed based on whether this first character is a space
    if (firstChar != " ") {
      // Return the first character and append a recursive call to processing the remaining characters
      return firstChar + formatStringToUrl(unparsedString);
    } else if (firstChar === " ") {
      // Return '%20' instead and append a recursive call to processing the remaining characters
      return "%20" + formatStringToUrl(unparsedString);
    }
  }
}

// This is looking pretty much solved to me. However, without testing for outputs, I'm uncertain of how the base case will perform, because I've never tried '.split("")' on a single character! Will it still create an array, of length 1? My gut tells me yes, but I'd rather refactor this not to use arrays at all -- thanks to the .charAt() method, they are unnecessary and may even be less performant.
// Here's my array-less refactor.

function formatStringToUrl(inputString) {
  // BASE CASE
  // If the *first* character is also the *last* characters, end the recursive calls -- there's nothing left to do after this
  if (inputString.length === 1) {
    return inputString;
  } else {
  // RECURSIVE CASE
    firstChar = inputString.charAt(0);
    // First, save the value of this character for a useful shorthand

    const unparsedString = inputString.substring(1);
    // Next, define a substring with this first character removed for our recursive argument

    // Now proceed based on whether this first character is a space
    if (firstChar != " ") {
      // Return the first character and append a recursive call to processing the remaining characters
      return firstChar + formatStringToUrl(unparsedString);
    } else if (firstChar === " ") {
      // Return '%20' instead and append a recursive call to processing the remaining characters
      return "%20" + formatStringToUrl(unparsedString);
    }
  }
}

// Finally, my thinking is to add a branch to my base case to handle spaces. While it's unlikely for a string to end in a space, I want my solution to be thorough for the parameters of the prompt.
// ...however, that would bring my total number of 'return' statements up to FOUR, and I know I can DRY this up (and keep my 'return' total at two) by using a variable to store the prepended string (either the character or '%20').

function formatStringToUrl(inputString) {
  let urlChar = inputString.charAt(0);
  if (urlChar === " ") {
    urlChar = "%20";
  }

  // BASE CASE
  if (inputString.length === 1) {
    return urlChar;
  } else {
  // RECURSIVE CASE
    const unparsedString = inputString.substring(1);
    return urlChar + formatStringToUrl(unparsedString);
  }
}

///////////
***********